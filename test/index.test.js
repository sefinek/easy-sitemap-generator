const fs = require('fs');
const path = require('path');
const { generateSitemap } = require('../lib/sitemapGenerator');
const axios = require('axios');
jest.mock('axios');
jest.mock('fs');
jest.mock('path');

describe('generateSitemap', () => {
	const baseUrl = 'http://example.com';
	const mockResponse = {
		data: `
            <html>
                <body>
                    <a href="/page1">Page 1</a>
                    <a href="/page2">Page 2</a>
                </body>
            </html>`,
		headers: {
			'last-modified': 'Wed, 21 Oct 2015 07:28:00 GMT'
		}
	};

	beforeEach(() => {
		axios.get.mockResolvedValue(mockResponse);
		fs.writeFileSync.mockClear();
		path.resolve.mockReturnValue('/mocked/path/to/sitemap.xml');
	});

	it('should generate a sitemap with the correct URLs and write to the correct file', async () => {
		await generateSitemap(baseUrl);

		const expectedSitemapContent = `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by sitemap generator - ${new Date()} -->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
    <url>
        <loc>http://example.com/page1</loc>
        <lastmod>2015-10-21T07:28:00.000Z</lastmod>
        <priority>1.00</priority>
    </url>
    <url>
        <loc>http://example.com/page2</loc>
        <lastmod>2015-10-21T07:28:00.000Z</lastmod>
        <priority>1.00</priority>
    </url>
</urlset>`;

		expect(fs.writeFileSync).toHaveBeenCalledWith('/mocked/path/to/sitemap.xml', expectedSitemapContent, 'utf8');
	});


	it('should handle rate limiting and retry fetching', async () => {
		axios.get
			.mockRejectedValueOnce({ response: { status: 429 } })
			.mockResolvedValueOnce(mockResponse);

		await generateSitemap(baseUrl);

		expect(fs.writeFileSync).toHaveBeenCalled();
	});
});
